name: Auto Publish to PyPI on Data Update

on:
  repository_dispatch:
    types: [data_update_triggered]

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests build twine

      - name: Run data update script
        run: |
          python scripts/update_all_data.py

      - name: Check for data changes
        id: check-changes
        run: |
          echo "Checking for changes in data directories..."
          
          # Add files to staging area
          git add localsets/randbattle_data/*.json localsets/metadata/*.json localsets/smogon_data/*.json || true
          
          # Check if there are staged changes
          if ! git diff --cached --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in data files"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in data files"
          fi

      - name: Bump version and publish
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Read current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update version in pyproject.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Commit the version bump
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION [auto]"
          
          # Create and push version tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "Version bumped to $NEW_VERSION and tag pushed"

      - name: Build package
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          python -m build

      - name: Publish to PyPI
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: No changes message
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "No data changes detected - skipping version bump and publish" 