name: Auto Publish to PyPI on Data Update

on:
  repository_dispatch:
    types: [data_update_triggered]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update data and publish to PyPI'
        required: false
        default: false
        type: boolean

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests build twine

      - name: Log trigger reason
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Workflow triggered by external repository changes"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Workflow triggered manually (force update: ${{ github.event.inputs.force_update }})"
          fi

      - name: Run data update script
        run: |
          python scripts/update_all_data.py

      - name: Bump version and publish
        run: |
          # Read current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update version in pyproject.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Add all data files and version bump
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add localsets/randbattle_data/*.json localsets/metadata/*.json localsets/smogon_data/*.json pyproject.toml
          git commit -m "chore: update data and bump version to $NEW_VERSION [auto]"
          
          # Create and push version tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "Version bumped to $NEW_VERSION and tag pushed"

      - name: Build package
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* 