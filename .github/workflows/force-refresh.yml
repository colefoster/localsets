name: Force Data Refresh

on:
  workflow_dispatch:
    inputs:
      refresh_randbats:
        description: 'Refresh RandBats data'
        required: false
        default: true
        type: boolean
      refresh_smogon:
        description: 'Refresh Smogon data'
        required: false
        default: true
        type: boolean
      force_rebuild:
        description: 'Force rebuild package even if no data changes'
        required: false
        default: false
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI after refresh'
        required: false
        default: false
        type: boolean

jobs:
  force-refresh:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests build twine

      - name: Log refresh parameters
        run: |
          echo "Force refresh triggered with parameters:"
          echo "- Refresh RandBats: ${{ github.event.inputs.refresh_randbats }}"
          echo "- Refresh Smogon: ${{ github.event.inputs.refresh_smogon }}"
          echo "- Force rebuild: ${{ github.event.inputs.force_rebuild }}"
          echo "- Publish to PyPI: ${{ github.event.inputs.publish_to_pypi }}"

      - name: Run data update script
        run: |
          python scripts/update_all_data.py

      - name: Check for data changes
        id: check-changes
        run: |
          echo "Checking for changes in data directories..."
          
          # Check if we have a valid git repository with commits
          if ! git rev-parse HEAD >/dev/null 2>&1; then
            echo "No valid HEAD commit found - treating as first run"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "First run - assuming changes exist"
            exit 0
          fi
          
          # Add files to staging area
          git add localsets/randbattle_data/*.json localsets/metadata/*.json localsets/smogon_data/*.json || true
          
          # Check if there are staged changes
          if ! git diff --cached --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in data files"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in data files"
          fi

      - name: Commit and push if data changed
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -m 'chore: force refresh data files [manual]'
          git push
          echo "Data files updated and committed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show changed files
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "Changed files:"
          git diff --cached --name-only || echo "No staged changes to show"

      - name: No changes message
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "No data changes detected - skipping commit"

      - name: Build package
        if: github.event.inputs.force_rebuild == true || github.event.inputs.publish_to_pypi == true
        run: |
          python -m build

      - name: Publish to PyPI
        if: github.event.inputs.publish_to_pypi == true
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: Summary
        run: |
          echo "=== Force Refresh Summary ==="
          echo "✅ Data refresh completed"
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "✅ Package rebuilt"
          fi
          if [ "${{ github.event.inputs.publish_to_pypi }}" = "true" ]; then
            echo "✅ Package published to PyPI"
          fi
          echo "=============================" 